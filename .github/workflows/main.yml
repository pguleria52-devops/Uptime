name : CI Pipeline

on:
    push:
        branches:
            - myaddition
    pull_request:
        branches:
            - master

jobs:
    build:
        runs-on: ubuntu-latest
        
        env:
            SONAR_PROJECT_KEY: uptime
            SONAR_PROJECT_NAME: uptime
        
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                node-version: '18'
                
            - name: Set up jdk
              uses: actions/setup-java@v3
              with:
                java-version: '17'
                distribution: 'temurin'
                
            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                path: ~/.npm
                key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                  ${{ runner.os }}-node-    
            
            - name: Install dependencies
              run : npm install
              
            # - name : Run Sonarqube Scan
            #   run: |
            #       npm install -g sonar-scanner
            #       sonar-scanner \
            #       -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            #       -Dsonar.projectName=$SONAR_PROJECT_NAME \
            #       -Dsonar.sources=. \
            #       -Dsonar.host.url=https://your-sonar-server.com \
            #       -Dsonar.login=$SONAR_TOKEN  
 
            - name : OWASP Dependency Check
              uses: dependency-check/Dependency-Check_Action@main
              with:
                project: 'uptime'
                path: '.'
                format: 'ALL'
                args: '--disableYarnAudit --disableNodeAudit'


            - name: Upload Dependency Check Report
              uses: actions/upload-artifact@v3.1.3
              with:
                name: dependency-check-report
                path: dependency-check-report.*

            - name: Install Trivy
              run: |
                sudo apt-get install -y wget apt-transport-https gnupg lsb-release
                wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
                sudo apt-get update && sudo apt-get install -y trivy
        
            - name: Trivy FS Scan
              run: trivy fs . --format json --output trivyfs.json
        
            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
        
            - name: Build and Push Docker Image
              run: |
                docker build -t uptime .
                docker tag uptime pguleria/uptime:latest
                docker push pguleria/uptime:latest
        
            - name: Trivy Image Scan
              run: trivy image pguleria/uptime:latest --format json --output trivy.json
        
            - name: Remove existing Docker container (if any)
              run: |
                docker stop chatbot || true
                docker rm chatbot || true
        
            - name: Deploy Container
              run: |
                docker run -d --name chatbot \
                  -v /var/run/docker.sock:/var/run/docker.sock \
                  -p 3001:3001 \
                  pguleria/uptime:latest    
      
